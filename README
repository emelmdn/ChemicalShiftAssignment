SİL /*
- Explain in the github repository the steps to make the experiment reproducible, in addition to explicitly indicating which files are the datasets in the repository.
- Indicate which file (s) correspond to the multiobjective model because I have reviewed the source code and there are models that are not related to the scientific article. 
*/
The Chemical Shift Assignment Project

This is the source code of the chemical shift assignment project that is developed on the MOEA framework. ( <http://www.moeaframework.org/>)

The repository contains all the implementation of the MOEA framework. The chemical shift assignment problect is implemented as additional problem on this framework. 
For this reason, this repository contains all the implementation of the MOEA framework, but only some models of this framework is used in the chemical shift assignment project.

The source code of the chemical shift assignment project  is existing in the following path: ChemicalShiftAssignment/src/org/moeaframework/problem/chemicalShiftAssignment/
  - The source code of the chemical shift assignment project are composed of the following files in this branch. 
        Assignment.java
        Atom.java: class contains the relevant information for an atom in the structure. Not only static values, but also dynamic values exist in the Atom class. The static values are defined as soon as the input files are read such as name, accuracy, coordinates, expected peaks, covalent connectivity atoms, reference frequency, name…etc. 
                    The dynamic values are the ones that depend on the selected solution candidate, i.e. the assignment. Some of these values are: global score, assigned flag, average frequency… etc. 
        AtomType.java
        chemicalShiftAssignment.java: This class is implemented to define the chemical shift assignment problem. It implements already existing Problem interface of the MOEA problem to define our chemical shift assignment problem. 
                    All attributes of the problem are defined in this class. Additionally, the newSolution() method of this class creates a new solution according to the defined size and range of the expected peaks.
                    The evaluate() method of this class is used to evaluate the objective values of a solution candidate. This method gets the solution candidate as input parameter and evaluates its objective values by calling the evaluate() method, which calls the evaluateObjectives() method to make the objective function calculations. Please see the comments in the source code for more detailed information.
        chemicalShiftAssignmentExample.java
        ChemicalShiftAssignmentInitialization.java
        CSTable.java
        CSTableReference.java
        Derf.java
        DihedralAngle.java: This class is used to define a dihedral angle, which is composed of its name, atoms and rotatable atom information. 
        Library.java
        ManualRun.java
        Peak.java
        RangeTree.java
        Residue.java: This class is used to store the residue structure including the dihedral angles and the atoms of a residue, which have their own classes.
        RunHyperheuristic.java: This is the main class of the chemical shift assignment project. Configuration values such as run-, tuning-, evaluations-count, algorithm name, population size, crossover and mutation rate and initMode (initialization mode) are defined here. 
                    The algorithms NSGA2, NSGA3, GA and Hyperheuristics constructors are also called from this method. 
        Sequence.java
        ShiftReference.java
        Spectrum.java

-> The other files in this path
-> Sonuç dosylarının olduğu file'lar
-> Algorithm hybrid için yazdığım kodlar
-> moea'nın hangi kodlarını kullandığım
-> bir deneyi nasıl yapabilir
-> yukarıda istedikleri bilgiler
